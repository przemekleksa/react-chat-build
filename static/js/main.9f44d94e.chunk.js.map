{"version":3,"sources":["components/MsgList.js","components/PopUp.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["messages","PopUp","state","username","handleClick","props","toggle","changeName","event","localStorage","setItem","myChangeHandler","setState","target","value","className","onClick","this","id","onSubmit","type","name","onChange","Component","client","ReconnectingWebSocket","MsgList","onButtonClicked","preventDefault","console","log","send","JSON","stringify","from","message","document","getElementById","reset","addMessage","val","togglePop","wasSeen","seen","getItem","setUsername","onopen","addEventListener","mgs","innerHTML","parse","data","map","m","i","date","Date","time","hours","getHours","minutes","getMinutes","join","setTimeout","msgs","addMessages","onclose","e","code","reason","prevProps","visibility","title","prevId","undefined","handleVisibilityChange","autoComplete","connect","msgNum","oldMsgs","dispatch","msg","App","isVisible","Boolean","window","location","hostname","match","initState","rootReducer","action","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"4OASIA,E,4FCPiBC,G,wNACpBC,MAAS,CACRC,SAAU,I,EAEVC,YAAc,WACb,EAAKC,MAAMC,U,EAEZC,WAAa,SAACC,GAEfC,aAAaC,QAAQ,WAAY,EAAKR,MAAMC,W,EAE3CQ,gBAAkB,SAACH,GAEpB,EAAKI,SAAS,CACb,SAAYJ,EAAMK,OAAOC,S,uDAKzB,OACC,yBAAKC,UAAU,SACb,yBAAKA,UAAU,iBACjB,yBAAKA,UAAU,aACf,6BAAK,+BAAa,0BAAMA,UAAU,QAAQC,QAASC,KAAKb,YAAac,GAAG,SAAtD,YAClB,kDACA,0BAAMC,SAAUF,KAAKV,YACpB,2BAAOa,KAAK,OAAOC,KAAK,WAAWC,SAAUL,KAAKN,kBAClD,2BAAOS,KAAK,SAASN,MAAM,SAASC,UAAU,mB,GA3BfQ,c,ODM7BC,EAAS,IAAIC,IAAsB,yBAG5BC,EAAb,4MA4JCC,gBAAkB,SAACnB,GAClBA,EAAMoB,iBACNC,QAAQC,IAAI,EAAKzB,OACjBmB,EAAOO,KAAKC,KAAKC,UAAU,CAC1BC,KAAM,EAAK7B,MAAMF,SAEjBgC,QAAS,EAAK9B,MAAM8B,WAErBC,SAASC,eAAe,QAAQC,QAEhC,EAAKjC,MAAMkC,WAAW,KAtKxB,EA6KC5B,gBAAkB,SAACH,GAERA,EAAMK,OAAOQ,KAAvB,IACImB,EAAMhC,EAAMK,OAAOC,MAEvB,EAAKT,MAAMkC,WAAWC,IAlLxB,EA4LCC,UAAY,WAKX,EAAKpC,MAAMqC,SAAS,EAAKrC,MAAMsC,OAjMjC,kEASsB,IAAD,OACnBd,QAAQC,IAAIrB,aAAamC,QAAQ,aACjCf,QAAQC,IAAIb,KAAKZ,OACU,OAAxBY,KAAKZ,MAAMF,UACbc,KAAKZ,MAAMwC,YAAY,SAUxBrB,EAAOsB,OAAS,WACfjB,QAAQC,IAAI,+BAIbN,EAAOuB,iBAAiB,WAAW,SAASvC,GAC3C,IAAIwC,EAAMZ,SAASC,eAAe,KAClCW,EAAIC,UAAYjB,KAAKkB,MAAM1C,EAAM2C,MAAMC,KAAI,SAACC,EAAGC,GAC9C,IAAIC,EAAO,IAAIC,KAAKH,EAAEI,MACtBC,EAAQH,EAAKI,WACbC,EAAUL,EAAKM,aAGf,OAFIH,EAAQ,KAAKA,EAAQ,IAAMA,GAC3BE,EAAU,KAAKA,EAAU,IAAMA,GAC7B,gCAAN,OAAuCP,EAAElB,QAAzC,+BAAuEkB,EAAEnB,KAAzE,mCAAwGwB,EAAxG,YAAiHE,EAAjH,mBACEE,KAAK,IAAMd,EAAIC,UAClBjD,EAAWgC,KAAKkB,MAAM1C,EAAM2C,SAK7BY,YAAW,WACV,EAAKnD,SAAS,CAEboD,KAAMhE,IAQP6B,QAAQC,IAAI9B,GACZ,EAAKK,MAAM4D,YAAYjE,KACtB,KAGFwB,EAAO0C,QAAU,SAACC,GACjBtC,QAAQC,IAAI,gCAAiCqC,EAAEC,KAAMD,EAAEE,SAE7B,OAAxBpD,KAAKZ,MAAMF,UACbc,KAAKZ,MAAMqC,SAAQ,KA/DtB,yCAqEoB4B,GAAY,IAAD,OAC1BrD,KAAKZ,MAAMkE,aACbnC,SAASoC,MAAQ,kBAGlB3C,QAAQC,IAAI,wCAAwCb,KAAKZ,MAAMkE,YAqC/DR,YAAW,WACV,IAAIU,OACmBC,IAApB,EAAKxE,MAAM8D,KACbS,EAAS,CAACvD,GAAI,QAEYwD,IAAvB,EAAKxE,MAAM8D,KAAK,KACnBS,EAAS,EAAKvE,MAAM8D,KAAK,GAAG9C,SAEVwD,IAAhB1E,EAAS,KACXA,EAAS,GAAK,CAACkB,GAAI,IAEjBlB,EAAS,GAAGkB,KAAOuD,IACrB5C,QAAQC,IAAI9B,EAAS,GAAGkB,GAAIuD,GAExB,EAAKpE,MAAMkE,aACdnC,SAASoC,MAAQ,iBAWnB,EAAK5D,SAAS,CAEboD,KAAMhE,MAIN,OA/IJ,sEAsME,OACC,6BACA,kBAAC,IAAD,CAAgBsB,SAAUL,KAAK0D,yBAG9B,yBAAK5D,UAAU,QAEd,qCAAWE,KAAKZ,MAAMF,UACtB,yBAAKY,UAAU,MAAMC,QAASC,KAAKwB,WAClC,4BAAQvB,GAAG,eAAX,iBAIDD,KAAKZ,MAAMsC,KAAO,kBAAC,EAAD,CAAOrC,OAAQW,KAAKwB,YAAgB,KACxD,0BAAMtB,SAAUF,KAAKU,gBAAiBT,GAAG,OAAO0D,aAAa,OAS5D,2BACC1D,GAAG,UACHE,KAAK,OACLC,KAAK,UACLC,SAAUL,KAAKN,kBAEhB,4BACCS,KAAK,SAASN,MAAM,GAAGC,UAAU,UADlC,IAEE,uBAAGA,UAAU,yBAKf,yBAAKG,GAAG,WA1OZ,GAA6BK,aA0QdsD,eAvBS,SAAC3E,GAExB,MAAO,CACN4E,OAAQ5E,EAAM4E,OACdnC,KAAMzC,EAAMyC,KACZxC,SAAUD,EAAMC,SAChB6D,KAAM9D,EAAM8D,KACZ7B,QAASjC,EAAMiC,QACf4C,QAAS7E,EAAM6E,YAKU,SAACC,GAE3B,MAAO,CACNtC,QAAS,SAACC,GAAWqC,EAAS,CAAC5D,KAAM,cAAeuB,KAAMA,KAC1DJ,WAAY,SAAC0C,GAAUD,EAAS,CAAC5D,KAAM,cAAe6D,IAAKA,KAC3DpC,YAAa,SAAC1C,GAAe6E,EAAS,CAAC5D,KAAM,eAAgBjB,SAAUA,KACvE8D,YAAa,SAACjE,GAAegF,EAAS,CAAC5D,KAAM,eAAgBpB,SAAUA,QAI1D6E,CAA6CnD,GEnO7CwD,E,4MAxCdhF,MAAQ,CACPqE,YAAY,G,EAGVI,uBAAyB,SAAAQ,GAC3B,EAAKvE,SAAS,CAAE2D,WAAYY,IAC5BtD,QAAQC,IAAI,mBAAoBqD,I,uDAKhC,OACC,yBAAKpE,UAAU,OACf,kBAAC,IAAD,CAAgBO,SAAUL,KAAK0D,wBAC9B,kBAAC,EAAD,CAASJ,WAAYtD,KAAKf,MAAMqE,mB,GAflBhD,aCGE6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBClBAC,EAAY,CACjBX,OAAQ,EACRnC,MAAM,EACNxC,SAAUM,aAAamC,QAAQ,YAC/BT,QAAS,GACT6B,KAAM,YAoEQ0B,EA/DK,WAAgC,IAA/BxF,EAA8B,uDAAtBuF,EAAWE,EAAW,uCAClD,MAAoB,gBAAhBA,EAAOvE,KACH,2BACHlB,GADJ,IAECyC,KAAMgD,EAAOhD,OAGK,gBAAhBgD,EAAOvE,KACH,2BACHlB,GADJ,IAECiC,QAASwD,EAAOV,MAGE,iBAAhBU,EAAOvE,KACH,2BACHlB,GADJ,IAECC,SAAUwF,EAAOxF,YA+BfwF,EAAOvE,KAAO,gBACV,2BACHlB,GADJ,IAEC8D,KAAM2B,EAAO3F,YAIX2F,EAAOvE,KAAO,qBACV,2BACHlB,GADJ,IAECqE,WAAYoB,EAAOpB,aAGdrE,GC7DF0F,EAAQC,YAAYH,EAAaL,OAAOS,8BAAgCT,OAAOS,gCAErFC,IAASC,OACT,kBAAC,IAAD,CAAUJ,MAAOA,GAChB,kBAAC,IAAMK,WAAP,KACE,kBAAC,EAAD,QAKD7D,SAASC,eAAe,SFgHpB,kBAAmB6D,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5E,QAAQ4E,MAAMA,EAAMtE,c","file":"static/js/main.9f44d94e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport ReconnectingWebSocket from 'reconnecting-websocket';\r\nimport PageVisibility from 'react-page-visibility';\r\n\r\nimport './MsgList.scss'\r\nimport PopUp from './PopUp';\r\nimport { connect } from 'react-redux';\r\n\r\nconst client = new ReconnectingWebSocket('ws://st-chat.shas.tel')\r\nlet messages\r\n\r\nexport class MsgList extends Component {\r\n\t\r\n\t// state = ({\r\n\t// \t// msgNum: 0,\r\n\t// \tseen: false,\r\n\t// \t// username: localStorage.getItem('username'),\r\n\t// })\r\n\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tconsole.log(localStorage.getItem('username'))\r\n\t\tconsole.log(this.props)\r\n\t\tif(this.props.username === null) {\r\n\t\t\tthis.props.setUsername('Guest')\r\n\t\t}\r\n\r\n\t\t// if (localStorage.getItem('username') === null){\r\n\t\t// \tlocalStorage.setItem('username', 'Guest')\r\n\t\t// \tthis.setState({\r\n\t\t// \t\tusername: localStorage.getItem('username'),\r\n\t\t// \t})\r\n\t\t// }\r\n\t\t// console.log(localStorage.getItem('username'))\r\n\t\tclient.onopen = () => {\r\n\t\t\tconsole.log('websocket client connected')\r\n\t\t}\r\n\r\n\t\t\r\n\t\tclient.addEventListener('message', function(event){\r\n\t\t\tlet mgs = document.getElementById('m')\r\n\t\t\tmgs.innerHTML = JSON.parse(event.data).map((m, i) => {\r\n\t\t\t\tlet date = new Date(m.time),\r\n\t\t\t\thours = date.getHours(),\r\n\t\t\t\tminutes = date.getMinutes()\r\n\t\t\t\tif (hours < 10) {hours = '0' + hours}\r\n\t\t\t\tif (minutes < 10) {minutes = '0' + minutes}\r\n\t\t\t\treturn `<p class='ms'><span id='msg'>${m.message}</span></p><p><span>${m.from}</span> <span id='time'>${hours}:${minutes}</span> </p>`\r\n\t\t\t}).join('') + mgs.innerHTML\r\n\t\t\tmessages = JSON.parse(event.data)\r\n\t\t\t// this.props.addMessages(messages)\r\n\t\t\t// console.log(messages)\r\n\t\t})\r\n\t\t\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\t// msgNum: document.getElementsByClassName('ms').length,\r\n\t\t\t\tmsgs: messages\r\n\t\t\t})\r\n\t\t\t// this.setState({\r\n\t\t\t// \t// msgNum: document.getElementsByClassName('ms').length,\r\n\t\t\t// \tmsgs: messages\r\n\t\t\t// })\r\n\t\t\t// console.log(messages.length)\r\n\t\t\t// this.props.addMessages(messages)\r\n\t\t\tconsole.log(messages)\r\n\t\t\tthis.props.addMessages(messages)\r\n\t\t},1000)\r\n\t\t// this.event()\r\n\t\t\r\n\t\tclient.onclose = (e) => {\r\n\t\t\tconsole.log('websocket client disconnected', e.code, e.reason)\r\n\t\t}\r\n\t\tif(this.props.username === null) {\r\n\t\t\tthis.props.wasSeen(true)\r\n\t\t}\r\n\t\t// console.log('msglist visibility',this.props.visibility)\r\n\t\t// console.log(this.props.msgNum)\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tif(this.props.visibility) {\r\n\t\t\tdocument.title = 'React Chat App';\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log('msglist componentDidUpdate visibility',this.props.visibility)\r\n\t\t// setTimeout(() => {\r\n\t\t// \tlet prevId\r\n\t\t// \tconsole.log(this.props.visibility, messages[0].id, prevId)\r\n\t\t// \t// console.log(this.state)\r\n\t\t// \tif(this.props.msgs === undefined) {\r\n\t\t// \t\tprevId = {id: 0}\r\n\t\t// \t} else {\r\n\t\t// \t\tprevId = this.props.msgs[0].id\r\n\t\t// \t}\r\n\t\t// \tconsole.log(prevId)\r\n\t\t// \tif(messages[0] === undefined) {\r\n\t\t// \t\tmessages[0] = {id: 0}\r\n\t\t// \t}\r\n\t\t// \t// if(messages[0].id !== prevId) {\r\n\t\t// \t// \tconsole.log(messages[0].id, prevId, this.props.msgs)\r\n\t\t// \t// \t// let newTitle = 'New messages';\r\n\t\t// \t// \tconsole.log(this.props.msgs)\r\n\t\t// \t// \tif(!this.props.visibility) {\r\n\t\t// \t// \t\tdocument.title = 'New message';\r\n\t\t// \t// \t} \r\n\t\t// \t// }\t\r\n\t\t// \t// if(this.props.oldMsgs[1].id !== prevId && this.props.msgs.length === 1) {\r\n\t\t// \t// \tconsole.log(messages[0].id, prevId, this.props.msgs)\r\n\t\t// \t// \t// let newTitle = 'New messages';\r\n\t\t// \t// \tconsole.log(this.props.msgs)\r\n\t\t// \t// \tif(!this.props.visibility) {\r\n\t\t// \t// \t\tdocument.title = 'New message';\r\n\t\t// \t// \t} \r\n\t\t// \t// }\t\r\n\t\t// \t// this.setState({\r\n\t\t// \t// \t// msgNum: document.getElementsByClassName('ms').length,\r\n\t\t// \t// \tmsgs: messages\r\n\t\t// \t// })\r\n\r\n\t\t// \tthis.props.addMessages(messages)\r\n\t\t// },1000)\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet prevId\r\n\t\t\tif(this.state.msgs === undefined) {\r\n\t\t\t\tprevId = {id: 0}\r\n\t\t\t} else {\r\n\t\t\t\tif(this.state.msgs[0] !== undefined)\r\n\t\t\t\tprevId = this.state.msgs[0].id\r\n\t\t\t}\r\n\t\t\tif(messages[0] === undefined) {\r\n\t\t\t\tmessages[0] = {id: 0}\r\n\t\t\t}\r\n\t\t\tif(messages[0].id !== prevId) {\r\n\t\t\t\tconsole.log(messages[0].id, prevId)\r\n\t\t\t\t// let newTitle = 'New messages';\r\n\t\t\t\tif(!this.props.visibility) {\r\n\t\t\t\t\tdocument.title = 'New messages';\r\n\t\t\t\t} \r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t// setInterval(() => {\r\n\t\t\t\t// \tdocument.title = 'messages';\r\n\t\t\t\t// },500)\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t// console.log(this.props.visibility)\r\n\t\t\tthis.setState({\r\n\t\t\t\t// msgNum: document.getElementsByClassName('ms').length,\r\n\t\t\t\tmsgs: messages\r\n\t\t\t})\r\n\t\t\t// console.log(messages.length)\r\n\t\t\t\r\n\t\t},1000)\r\n\t\t\r\n\t\t// setInterval(() => {\r\n\t\t// \tconsole.log(this.props.visibility)\r\n\t\t// },300)\r\n\t}\r\n\r\n\tupdateState(){\r\n\t\t// this.setState({\r\n\t\t// \tmsgNum: 1000\r\n\t\t// })\r\n\t}\r\n\t\r\n\tonButtonClicked = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tconsole.log(this.props)\r\n\t\tclient.send(JSON.stringify({\r\n\t\t\tfrom: this.props.username,\r\n\t\t\t// message: 1\r\n\t\t\tmessage: this.props.message\r\n\t\t}))\r\n\t\tdocument.getElementById('form').reset()\r\n\t\t// this.changeTitle()\r\n\t\tthis.props.addMessage('')\r\n\t}\r\n\t// changeTitle() {\r\n\t// \tlet title = document.title\r\n\t// \tlet newTitle = 'you have new messages';\r\n\t// \tdocument.title = newTitle;\r\n\t// }\r\n\tmyChangeHandler = (event) => {\r\n\t\t// console.log(event.target.name)\r\n\t\tlet nam = event.target.name;\r\n\t\tlet val = event.target.value;\r\n\t\t// this.setState({[nam]: val});\r\n\t\tthis.props.addMessage(val)\r\n\t\t// this.props.addMessage({\r\n\t\t// \tfrom: this.props.username,\r\n\t\t// \tmessage: val,\r\n\t\t// \ttime: new Date('January 1, 1970'),\r\n\t\t// \tid: 345\r\n\t\t// })\r\n\t\t\r\n  \t}\r\n\r\n\ttogglePop = () => {\r\n\t\t// this.setState({\r\n\t\t//  seen: !this.props.seen,\r\n\t\t// });\r\n\t\t// console.log(this.props.seen)\r\n\t\tthis.props.wasSeen(!this.props.seen)\r\n\t   };\r\n\r\n\trender() {\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t<PageVisibility onChange={this.handleVisibilityChange}>\r\n               \r\n            </PageVisibility>\r\n\t\t\t\t<div className=\"name\">\r\n\t\t\t\t\r\n\t\t\t\t\t<h1>Hello {this.props.username}</h1>\r\n\t\t\t\t\t<div className=\"btn\" onClick={this.togglePop}>\r\n\t\t\t\t\t\t<button id='change-name'>Change name</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.props.seen ? <PopUp toggle={this.togglePop} /> : null}\r\n\t\t\t<form onSubmit={this.onButtonClicked} id='form' autoComplete=\"off\">\r\n\t\t\t\t\r\n\t\t\t\t{/* <p>Enter your name:</p>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tname='from'\r\n\t\t\t\t\tonChange={this.myChangeHandler}\r\n\t\t\t\t/>\r\n\t\t\t\t<p>Enter your message:</p> */}\r\n\t\t\t\t<input\r\n\t\t\t\t\tid='message'\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tname='message'\r\n\t\t\t\t\tonChange={this.myChangeHandler}\r\n\t\t\t\t/>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype='submit' value='' className='submit'\r\n\t\t\t\t> <i className=\"fas fa-paper-plane\"></i>\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t\t{/* <button onClick={() => {this.showNotifications()}}>send message</button> */}\r\n\t\t\t{/* <p>{this.state.msgNum}</p> */}\r\n\t\t\t\t<div id='m'>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\t// console.log('state', state)\r\n\treturn {\r\n\t\tmsgNum: state.msgNum,\r\n\t\tseen: state.seen,\r\n\t\tusername: state.username,\r\n\t\tmsgs: state.msgs,\r\n\t\tmessage: state.message,\r\n\t\toldMsgs: state.oldMsgs\r\n\t\t// visibility: state.visibility\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\t// console.log(this.props.seen)\r\n\treturn {\r\n\t\twasSeen: (seen) => { dispatch({type: 'TOGGLE_SEEN', seen: seen}) },\r\n\t\taddMessage: (msg) => { dispatch({type: 'ADD_MESSAGE', msg: msg}) },\r\n\t\tsetUsername: (username) => { dispatch({type: 'SET_USERNAME', username: username})},\r\n\t\taddMessages: (messages) => { dispatch({type: 'ADD_MESSAGES', messages: messages})}\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MsgList)\r\n","import React, { Component } from \"react\";\r\nimport './PopUp.scss'\r\nexport default class PopUp extends Component {\r\n\tstate = ({\r\n\t\tusername: ''\r\n\t})\r\n  handleClick = () => {\r\n   this.props.toggle();\r\n  };\r\n  changeName = (event) => {\r\n\t//   console.log(event.target.value)\r\n\tlocalStorage.setItem('username', this.state.username)\r\n  }\r\n  myChangeHandler = (event) => {\r\n\t// console.log(event.target.value)\r\n\tthis.setState({\r\n\t\t'username': event.target.value\r\n\t})\r\n  }\r\n\r\nrender() {\r\n  return (\r\n   <div className=\"modal\">\r\n     <div className=\"modal_content\">\r\n\t\t <div className=\"container\">\r\n\t\t\t<div><span></span><span className=\"close\" onClick={this.handleClick} id='close'>&times;   </span></div>\r\n\t\t\t<p>Enter your username</p>\r\n\t\t\t<form onSubmit={this.changeName}>\r\n\t\t\t\t<input type=\"text\" name='username' onChange={this.myChangeHandler}/>\r\n\t\t\t\t<input type='submit' value='Accept' className='submit'/>\r\n\t\t\t</form>\r\n\t\t </div>\r\n   \r\n    </div>\r\n   </div>\r\n  );\r\n }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport MsgList from './components/MsgList';\n\nimport PageVisibility from 'react-page-visibility';\n\nimport { connect } from 'react-redux';\n\n\nclass App extends Component{\n\tstate = {\n\t\tvisibility: true,\n    };\n\n    handleVisibilityChange = isVisible => {\n\t\tthis.setState({ visibility: isVisible });\n\t\tconsole.log('isvisible app.js', isVisible)\n\n\t\t// this.props.toggleVisibility(isVisible)\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t<PageVisibility onChange={this.handleVisibilityChange}>\n\t\t\t\t<MsgList visibility={this.state.visibility}/>\n\t\t\t\t{/* <MsgList/> */}\n\t\t\t</PageVisibility>\n\t\t\t\n\t\t\t</div>\n\t\t  );\n\t}\n\n}\n\n// const mapStateToProps = (state) => {\n// \t// console.log('state', state)\n// \treturn {\n// \t\tvisibility: state.visibility\n// \t}\n// }\n\n// const mapDispatchToProps = (dispatch) => {\n// \tconsole.log('widocznosc zmieniona')\n// \treturn {\n// \t\ttoggleVisibility: (visibility) => { dispatch({type: 'TOGGLE_VISIBILITY', visibility: visibility}) },\n\n// \t}\n// }\n\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n\tmsgNum: 0,\r\n\tseen: false,\r\n\tusername: localStorage.getItem('username'),\r\n\tmessage: '',\r\n\tmsgs: 'try this',\r\n\t\r\n\t// visibility: 'no',\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n\tif (action.type === 'TOGGLE_SEEN') {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tseen: action.seen\r\n\t\t}\r\n\t}\r\n\tif (action.type === 'ADD_MESSAGE') {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tmessage: action.msg \r\n\t\t}\r\n\t}\r\n\tif (action.type === 'SET_USERNAME') {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tusername: action.username\r\n\t\t}\r\n\t}\r\n\r\n\t// if (action.type = 'ADD_MESSAGES') {\r\n\t// \tif(state.oldMsgs === '' || state.oldMsgs === undefined) {\r\n\t// \t\treturn{\r\n\t// \t\t\t...state,\r\n\t// \t\t\toldMsgs: action.messages\r\n\t// \t\t}\r\n\t// \t}\r\n\t// \tif (state.msgs.length === 1){\r\n\t// \t\tlet newMsgs = state.oldMsgs.unshift(action.messages[0])\r\n\t// \t\t// let n = state.msgs.unshift(action.messages[0])\r\n\t// \t\tconsole.log(newMsgs)\r\n\t// \t\treturn {\r\n\t// \t\t\t...state,\r\n\t// \t\t\tmsgs: action.messages\r\n\t// \t\t}\r\n\t\t\t\r\n\t// \t}\r\n\t// \tif (state.msgs.length > 1){\r\n\t// \t\t// let Msgs = state.msgs.unshift(action.messages[0])\r\n\t// \t\treturn {\r\n\t// \t\t\t...state,\r\n\t// \t\t\tmsgs: action.messages,\r\n\t// \t\t\t// msgs: state.oldMsgs,\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\r\n\tif (action.type = 'ADD_MESSAGES') {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tmsgs: action.messages\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (action.type = 'TOGGLE_VISIBILITY') {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tvisibility: action.visibility\r\n\t\t}\r\n\t}\r\n\treturn state\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer'\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render(\n<Provider store={store}>\n\t<React.StrictMode>\n\t\t\t<App />\n\t</React.StrictMode>\n</Provider>,\n\t\t\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}